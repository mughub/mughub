"Represents a Git object."
interface Object {
  "An abbreviated version of the Git object ID."
  abbreviatedOid: String!

  "The HTTP path for this Git object."
  commitResourcePath: sc.URI!

  "The HTTP URL for this Git object."
  commitUrl: sc.URI!

  id: ID!

  "The Git object ID."
  oid: ObjectID!

  "The Repository the Git object belongs to."
  repository: repo.Repository!
}

"A Git object ID."
scalar ObjectID

"Represents a Git blob."
type Blob implements abs.Node, Object {
  "Byte size of Blob object."
  byteSize: Int!

  "Indicates whether the Blob is binary or text."
  isBinary: Boolean!

  "Indicates whether the contents truncated."
  isTruncated: Boolean!

  "UTF8 text data or null if the Blob is binary."
  text: String
}

"Represents a Git commit."
type Commit implements abs.Node, Object, abs.Subscribable {
  "Comments made on the commit."
  comments(
    "Returns the elements in the list that come after the specified cursor."
    after: String
    "Returns the elements in the list that come before the specified cursor."
    before: String
    "Returns the first n elements from the list."
    first: Int
    "Returns the last n elements from the list."
    last: Int
    ): CommitCommentConnection

  "The linear commit history starting from (and including) this commit, in the same order as `git log`."
  history(
    "Returns the elements in the list that come after the specified cursor."
    after: String
    "If non-null, filters history to only show commits with matching authorship."
    author: CommitAuthor
    "Returns the elements in the list that come before the specified cursor."
    before: String
    "Returns the first n elements from the list."
    first: Int
    "Returns the last n elements from the list."
    last: Int
    "If non-null, filters the history to only show commits touching files under this path."
    path: String
    "Allows specifying a beginning time or date for fetching commits."
    since: Timestamp
    "Allows specifying an ending time or date for fetching commits."
    until: Timestamp
    ): CommitHistoryConnection!

  "The parents of a commit."
  parents(
    "Returns the elements in the list that come after the specified cursor."
    after: String
    "Returns the elements in the list that come before the specified cursor."
    before: String
    "Returns the first n elements from the list."
    first: Int
    "Returns the last n elements from the list."
    last: Int
    ): CommitConnection!

  "The number of additions in this commit."
  additions: Int!

  "Authorship details of the commit."
  author: Actor

  "Check if the committer and the author match."
  authoredByCommitter: Boolean!

  "The datetime when this commit was authored."
  authoredDate: DateTime!

  "Fetches git blame information."
  blame(
    "The file whose Git blame information you want."
    path: String!
    ): Blame!

  "The number of changed files in this commit."
  changedFiles: Int!

  "The datetime when this commit was committed."
  commitDate: DateTime!

  "Check if committed via GoHub web UI."
  committedViaWeb: Boolean!

  "Committership details of the commit."
  committer: Actor

  "The number of deletions in this commit."
  deletions: Int!

  "The Git commit message."
  message: String!

  "The Git commit message body."
  messageBody: String!

  "The Git commit body rendered to HTML."
  messageHTML: sc.HTML!

  "The Git commit message headline."
  messageHeadline: String!

  "The Git commit message headline rendered to HTML."
  messageHeadlineHTML: sc.HTML!

  "The datetime when this commit was pushed."
  pushedDate: DateTime

  "Commit signing information, if present."
  signature: Signature

  "Status information for this commit."
  status: Status

  "Returns a URL to download a tarball archive for a repository."
  tarballUrl: sc.URI!

  "Commit's root Tree."
  tree: Tree!

  "The HTTP path for the tree of this commit."
  treeResourcePath: sc.URI!

  "The HTTP URL for the tree of this commit."
  treeUrl: sc.URI!

  "The HTTP URL for this commit."
  url: sc.URI!

  "Returns a URL to download a zipball archive for a repository."
  zipballUrl: sc.URI!
}

"Specifies an author for filtering Git commits."
input CommitAuthor {
  "Email addresses to filter by. Commits authored by any of the specified email addresses will be returned."
  emails: [String!]
  "ID of a User to filter by. If non-null, only commits authored by this user will be returned. Takes precedence over emails."
  id: ID
}

"An ISO-8601 encoded date string. Unlike DateTime type, Timestamp is not converted in UTC."
scalar Timestamp

"Represents an actor in a Git commit (ie. an author or committer)."
type Actor {
  "A URL pointing to the author's public avatar."
  avatarUrl(
    "The size of the resulting square image."
    size: Int
    ): URI!

  "The timestamp of the Git action (authoring or committing)"
  date: Timestamp

  "The email in the Git commit."
  email: String

  "The name in the Git commit."
  name: String

  "The GoHub user corresponding to the email field. Null if no such user exists."
  user: user.User
}

"Represents a Git blame."
type Blame {
  "The list of ranges from a Git blame."
  ranges: [BlameRange!]!
}

"Represents a range of information from a Git blame."
type BlameRange {
  """Identifies the recency of the change, from 1 (new) to 10 (old). This is calculated
     as a 2-quantile and determines the length of distance between the median age of all
     the changes in the file and the recency of the current range's change."""
  age: Int!

  "Identifies the line author."
  commit: Commit!

  "The ending line for the range."
  endingLine: Int!

  "The starting line for the range."
  startingLine: Int!
}

"Information about a signature (GPG or S/MIME) on a Commit or Tag."
interface Signature {
  "Email used to sign this object."
  email: String!

  "True if the signature is valid and verified by GoHub."
  isValid: Boolean!

  "Payload for GPG siging object. Raw ODB object without the signature header."
  payload: String!

  "ASCII-armored signature header from object."
  signature: String!

  "GoHub user corresponding to email signing this commit."
  signer: User

  "The state of this signature. VALID if signature is valid and verified by GoHub, otherwise represents reason why signature is considered invalid."
  state: SignatureState!

  "True if signature was made with GoHub's signing key."
  wasSignedByGoHub: Boolean!
}

"The state of a Git signature."
enum SignatureState {
  "The signing certificate or its chain could not be verified."
  BAD_CERT

  "Invalid email used for signing."
  BAD_EMAIL

  "Signing key expired."
  EXPIRED_KEY

  "Internal error - the GPG verification service misbehaved."
  GPGVERIFY_ERROR

  "Internal error - the GPG verification service is unavailable at the moment."
  GPGVERIFY_UNAVAILABLE

  "Invalid signature."
  INVALID

  "Malformed signature."
  MALFORMED_SIG

  "The usage flags for the key that signed this don't allow signing"
  NOT_SIGNING_KEY

  "Email used for signing not known to GoHub."
  NO_USER

  "Valid signature, though certificate revocation check failed."
  OCSP_ERROR

  "Valid signature, pending certificate revocation checking."
  OCSP_PENDING

  "One or more certificates in chain has been revoked."
  OCSP_REVOKED

  "Key used for signing not known to GoHub."
  UNKNOWN_KEY

  "Unknown signature type."
  UNKNOWN_SIG_TYPE

  "Unsigned."
  UNSIGNED

  "Email used for signing unverified on GoHub."
  UNVERIFIED_EMAIL

  "Valid signature and verified by GoHub."
  VALID
}

"Represents a commit status."
type Status implements abs.Node {
  "The commit this status is attached to."
  commit: Commit

  "Looks up an individual status context by context name."
  context(
    "The context name."
    name: String!
    ): StatusContext

  "The individual status context for this commit."
  contexts: [StatusContext!]!

  "The combined commit state."
  state: StatusState!
}

"Represents an individual commit status context."
type StatusContext implements abs.Node {
  "This commit this status context is attached to."
  commit: Commit

  "The name of this status context."
  context: String!

  "Identifies the date and time when this object was created."
  createdAt: DateTime!

  "The actor who created this status context."
  creator: abs.Actor

  "The description for this status context."
  description: String

  "The state of this status context."
  state: StatusState!

  "The URL for this status context."
  targetUrl: sc.URI
}

"The possible commit status states."
enum StatusState {
  "Status is errored."
  ERROR

  "Status is expected."
  EXPECTED

  "Status is failing."
  FAILURE

  "Status is pending."
  PENDING

  "Status is successful."
  SUCCESS
}
