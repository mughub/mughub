// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mughub/mughub/db (interfaces: Interface)

package dbtest

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	db "github.com/mughub/mughub/db"
	viper "github.com/spf13/viper"
	io "io"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockInterface) Do(arg0 context.Context, arg1 string, arg2 map[string]interface{}) *db.Result {
	ret := m.ctrl.Call(m, "Do", arg0, arg1, arg2)
	ret0, _ := ret[0].(*db.Result)
	return ret0
}

// Do indicates an expected call of Do
func (mr *MockInterfaceMockRecorder) Do(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockInterface)(nil).Do), arg0, arg1, arg2)
}

// Init mocks base method
func (m *MockInterface) Init(arg0 io.Reader, arg1 *viper.Viper) error {
	ret := m.ctrl.Call(m, "Init", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockInterfaceMockRecorder) Init(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockInterface)(nil).Init), arg0, arg1)
}
